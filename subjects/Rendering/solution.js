////////////////////////////////////////////////////////////////////////////////
// Exercise:
//
// - render DATA.title in an <h1>
// - render a <ul> with each of DATA.items as an <li>
// - now only render an <li> for mexican food (hint: use DATA.items.filter(...))
// - sort the items in alphabetical order by name (hint: use sort-by https://github.com/staygrimm/sort-by#example)
//
// Got extra time?
// - add a select dropdown to make filtering on `type` dynamic
// - add a button to toggle the sort order
// - Hint: you'll need an `updateThePage` function that calls `render`,
//   and then you'll need to call it in the event handlers of the form controls
////////////////////////////////////////////////////////////////////////////////
import React from 'react'
import { render } from 'react-dom';
import sortBy from 'sort-by';
import './styles';

const MenuList = React.createClass({
    render: function() {
        var lis = this.props.data.map(function(item) {
            return <li key={item.id}>{item.name}</li>;
        });

        return (
            <ul className="menuList">
                {lis}
            </ul>
        );
    }
});

const MenuSelect = React.createClass({
    getInitialState: function() {
        return {author: '', text: ''};
    },
    componentDidMount: function() {
        console.log('MenuSelect... componentDidMount');
    },
    handleTextChange: function(e) {
        this.setState({text: e.target.value});
    },
    handleChange: function(e) {
        //e.preventDefault();

        //var author = this.state.author.trim();
        //var text = this.state.text.trim();
        //if (!text || !author) {
        //    return;
        //}
        //this.props.onCommentSubmit({filterBy: });
        //this.setState({author: '', text: ''});
    },
    render: function() {
        let types = new Set();
        //types.add('all');

        for(let item of this.props.data) {
            types.add(item.type);
        }

        let options = new Set(), index = 1;
        for(let type of types) {
            options.add(<option key={index++} value={type}>{type}</option>);
        }

        return (
            <select className="menuSelect" onchange={this.handleChange()}>
                {options}
            </select>
        );
    }
});


//const Menu = React.createClass({
//    getInitialState: function() {
//        return {data: []};
//    },
//    render: function() {
//        return (
//        <div>
//            <h1>{this.state.data.title} filter by  </h1>
//
//            <MenuList data={this.state.data} filter="">
//            </MenuList>
//
//            <MenuSelect data={this.state.data}>
//
//            </MenuSelect>
//        </div>
//        );
//    }
//});

// onChange={this.handleValueChange}


const Menu = React.createClass({
    render: function() {
        return (
            <div>
                <h1>{this.props.data.title} filter by  </h1>

                <MenuList data={this.props.data.items} filter="">
                </MenuList>

                <MenuSelect data={this.props.data.items}>

                </MenuSelect>
            </div>
        );
    }
});

render(<Menu data={
{
  title: 'Menu',
  items: [
    { id: 1, name: 'tacos', type: 'mexican' },
    { id: 2, name: 'burrito', type: 'mexican' },
    { id: 3, name: 'tostada', type: 'mexican' },
    { id: 4, name: 'mushy peas', type: 'english' },
    { id: 5, name: 'fish and chips', type: 'english' },
    { id: 6, name: 'black pudding', type: 'english' }
  ]
}
}  />, document.getElementById('app'), () => {
  //require('./tests').run()
});

//------------------------------------------------

/*
var CommentBox = React.createClass({
    loadCommentsFromServer: function() {
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            success: function(data) {
                this.setState({data: data});
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    handleCommentSubmit: function(comment) {
        var comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.id = Date.now();
        var newComments = comments.concat([comment]);
        this.setState({data: newComments});
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment,
            success: function(data) {
                this.setState({data: data});
            }.bind(this),
            error: function(xhr, status, err) {
                this.setState({data: comments});
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    getInitialState: function() {
        return {data: []};
    },
    componentDidMount: function() {
        this.loadCommentsFromServer();
        setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    },
    render: function() {
        return (

            <div>
                <h1>{DATA.title}</h1>
                <ul ref="">
                    {items}
                </ul>

                <select>
                    {options}
                </select>

            </div>

            <div className="commentBox">
                <h1>Filter Results</h1>
                <CommentList data={this.state.data} />
                <CommentForm onCommentSubmit={this.handleCommentSubmit} />
            </div>
        );
    }
});

var CommentList = React.createClass({
    render: function() {
        var commentNodes = this.props.data.map(function(comment) {
            return (
                <Comment author={comment.author} key={comment.id}>
                    {comment.text}
                </Comment>
            );
        });
        return (
            <div className="commentList">
                {commentNodes}
            </div>
        );
    }
});

var CommentForm = React.createClass({
    getInitialState: function() {
        return {author: '', text: ''};
    },
    handleAuthorChange: function(e) {
        this.setState({author: e.target.value});
    },
    handleTextChange: function(e) {
        this.setState({text: e.target.value});
    },
    handleSubmit: function(e) {
        e.preventDefault();
        var author = this.state.author.trim();
        var text = this.state.text.trim();
        if (!text || !author) {
            return;
        }
        this.props.onCommentSubmit({author: author, text: text});
        this.setState({author: '', text: ''});
    },
    render: function() {
        return (
            <form className="commentForm" onSubmit={this.handleSubmit}>
                <input
                    type="text"
                    placeholder="Your name"
                    value={this.state.author}
                    onChange={this.handleAuthorChange}
                />
                <input
                    type="text"
                    placeholder="Say something..."
                    value={this.state.text}
                    onChange={this.handleTextChange}
                />
                <input type="submit" value="Post" />
            </form>
        );
    }
});

//ReactDOM.render(
//    <CommentBox url="/api/comments" pollInterval={2000} />,
//    document.getElementById('content')
//);

render(<Menu/>, document.getElementById('app'), () => {
  require('./tests').run()
});
*/